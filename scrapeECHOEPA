#!/usr/bin/env python3 
import csv
import os 
import sys
import subprocess
import datetime
import pandas as pd
import glob
import db_connect
import EXP_PGM_pg as pgm 
import viewsToTable as mview
from sqlalchemy import create_engine
os.chdir(os.path.dirname(sys.argv[0]))
engine,whichDb= db_connect.connect()
filesWithNulls=['CASE_ENFORCEMENTS','ICIS_PERMITS','FRS_PROGRAM_LINKS','CASE_ENFORCEMENT_CONCLUSIONS','EPA_INFORMAL_ENFORCEMENT_ACTIONS','NPDES_CS_VIOLATIONS']
def truncate(table):
	print(table)
	try:
		engine.execute('truncate "%s"' %(table))
	except Exception as e:
		print (sys.exc_info()[0])
		print (e.__class__.__name__)
		sys.exit("Exit") 
with open('files.csv', newline='') as csvfile:
	reader = csv.DictReader(csvfile)
	uniqueZips=[]
	tables=[]
	for row in reader:
		tables.append(row['CSV FILE'])
		if row['Location'] not in uniqueZips:
			uniqueZips.append(row['Location'])

	for location in uniqueZips:
		if not os.path.isfile('zips/%s' %(location)):
			print("Getting %s" %(location))
			modified = subprocess.check_output("./wgetEPA %s" %(location), shell=True).decode("utf-8").strip().splitlines()[0]
			print(modified)
			engine.execute("update \"Last-Modified\" set \"modified\"='%s' where \"zip\" = '%s'" %(modified,location))
			os.system("./unzipEPA %s" %(location))
		else:
			print("File %s  already exists" %(location))
			os.system("./unzipEPA %s" %(location))
	quit()			
	for nulledFile in filesWithNulls:	
		os.system("./stripNulls %s" %(nulledFile))

	#for table in tables:
	#	truncate(table)
	#	df=pd.read_csv('./CSV/%s.csv' %(table),low_memory=False)
	#	df.to_sql(table,engine,if_exists='append',index=False,chunksize=100)	
	#	os.remove('./CSV/%s.csv' %(table))

	for table in tables:
		truncate(table)
		print ("truncated %s"%(table))
		os.system("./csvImport_pg %s %s" %(table,whichDb))

	# 	os.system("./chunkFile %s" %(table))
	# 	chunks=glob.glob('./CSV/%s_[0-9]*.csv' %(table)) 
	#	for path in chunks:
	# 		print("processing %s" %(path))
	# 		fileStem=path.split("/")[2].split(".")[0]
	# 		df=pd.read_csv('./CSV/%s.csv' %(fileStem), engine= 'c',dtype=str)
	# 		df.to_sql(table,engine,if_exists='append', index=False)	
	# 		os.remove('./CSV/%s.csv' %(fileStem))
#		os.remove('./CSV/%s.csv' %(table))
	pgm.build(engine)
	mview.build(engine)
	engine.execute("analyze");		

for csv in glob.glob("./CSV/*.csv"):
	os.remove(csv)		

for zip in glob.glob("./zips/*.zip"):
	os.remove(zip)
db_connect.change_db()


