#!/usr/bin/env python3 
import csv
import os 
import sys
import subprocess
from datetime import datetime
import pandas as pd
import glob
import db_connect
#script for creating views based on raw ECHOEPA data
import EXP_PGM as pgm 
#script which creates materialized views of view 
import viewsToTable as mview
from sqlalchemy import create_engine
os.chdir(os.path.dirname(sys.argv[0]))
engine,whichDb= db_connect.connect()
def truncate(table):
	print(table)
	try:
		engine.execute('truncate "%s"' %(table))
	except Exception as e:
		print (sys.exc_info()[0])
		print (e.__class__.__name__)
		sys.exit("Exit") 
#used to compare number of rows in download csv to sql count(*)
def checkSanity(table):
	file=open("CSV/%s.csv" %table)
	reader=csv.reader(file)
	csv_count=len(list(reader))-1
	sql_count=list(engine.execute('select count(*) from "%s"' %table).fetchone())[0]
	engine.execute("update \"Last-Modified\" set \"csv_count\"=%s,\"sql_count\"=%s where \"name\"='%s'" %(csv_count,sql_count,table ));
	print("update \"Last-Modified\" set \"csv_count\"=%s,\"sql_count\"=%s where \"name\"='%s'" %(csv_count,sql_count,table ));
#commented out to run maually for now
#os.system("./wgetGSheet")

with open('files.csv', newline='') as csvfile:
	reader = csv.DictReader(csvfile)
	uniqueZips=[]
	tables=[]
	for row in reader:
		tables.append(row['CSV FILE'])
		if row['Location'] not in uniqueZips:
			uniqueZips.append(row['Location'])
	for location in uniqueZips:
		if not os.path.isfile('zips/%s' %(location)):
			modified=""
			while(modified==""):
				print("Getting %s" %(location))
				modified = subprocess.check_output("./wgetEPA %s" %(location), shell=True).decode("utf-8").strip().splitlines()[0]
			print(modified)
			engine.execute("update \"Last-Modified\" set \"modified\"='%s' where \"zip\" = '%s'" %(modified,location))
			os.system("./unzipEPA %s" %(location))
		else:
			print("File %s  already exists" %(location))
			os.system("./unzipEPA %s" %(location))
	for table in tables:
		#some csvs failed to import with nulls
		os.system("./stripNulls %s" %(table))
		truncate(table)
		print ("truncated %s"%(table))
		os.system("./csvImport %s %s" %(table,whichDb))
		checkSanity(table)
	#create views based off of ECHOEPA tables
	pgm.build(engine)
	#materialize views
	mview.build(engine)
	engine.execute("analyze");		
for csv in glob.glob("./CSV/*.csv"):
	os.remove(csv)		
for zip in glob.glob("./zips/*.zip"):
	os.remove(zip)
db_connect.change_db()


